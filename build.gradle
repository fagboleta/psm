plugins {
	id 'org.springframework.boot' version '2.5.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'jacoco'
}

group = 'br.com.dfaglioni'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

final dbPidfileName = 'dbcontainer.pid';

test {
   

	useJUnitPlatform()
    finalizedBy jacocoTestReport 
}

apply from: 'gradle/docker.gradle'


task startApp(type: GradleBuild) {
 
   tasks = ['startDBContainer', 'bootRun']
   
   doFirst {
       
       def file = new File(dbPidfileName)
       
       if ( file.exists()) {
      
       
            startApp.tasks = ['stopDBContainer', 'startDBContainer', 'bootRun']
 
        }
 
  
   }  
   
 
}

jacocoTestReport {
  

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['br/com/dfaglioni/pismo/PismoApplication*'])
        }))
    }
}



